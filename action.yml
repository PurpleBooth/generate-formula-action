name: Generate Homebrew Formula PR
description: Opens a PR on the homebrew repo formula

inputs:
  current_version:
    description: 'The current version'
    required: true
  previous_version:
    description: 'The previous version'
    required: true
  committer_token:
    description: 'Commit token to use to create PRs on the homebrew repo'
    required: true
  gpg_private_key:
    description: 'The private key to sign the git repository with'
    required: true
  gpg_passphrase:
    description: 'The passphrase for the gpg key'
    required: true

runs:
  using: composite
  steps:
    - id: get_repository_name
      name: Work out repository name
      run: echo "REPOSITORY_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")" >> "$GITHUB_OUTPUT"
      shell: bash
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      name: Checkout this repository
      with:
        lfs: true
        fetch-depth: 0
        path: main-repo
        ref: v${{ inputs.current_version }}
    - name: Import GPG key
      uses: crazy-max/ghaction-import-gpg@e89d40939c28e39f97cf32126055eeae86ba74ec # v6
      with:
        gpg_private_key: ${{ inputs.gpg_private_key }}
        passphrase: ${{ inputs.gpg_passphrase }}
        git_user_signingkey: true
        git_commit_gpgsign: true
        git_tag_gpgsign: true
        workdir: main-repo
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      with:
        repository: PurpleBooth/homebrew-repo
        token: ${{ inputs.committer_token }}
        path: homebrew-repo
        ref: main
      name: Checkout the custom tap
    - name: Import GPG key
      uses: crazy-max/ghaction-import-gpg@e89d40939c28e39f97cf32126055eeae86ba74ec # v6
      with:
        gpg_private_key: ${{ inputs.gpg_private_key }}
        passphrase: ${{ inputs.gpg_passphrase }}
        git_user_signingkey: true
        git_commit_gpgsign: true
        git_tag_gpgsign: true
        workdir: homebrew-repo
    - run: |
        curl -Lo file.tar.gz "https://github.com/$GIT_REPO/archive/$GIT_TAG.tar.gz"
        sha256sum -b file.tar.gz | awk '{ print $1 }' > hash
        echo "SHA256=$( cat hash )" >> "$GITHUB_OUTPUT"
      id: hash
      shell: bash
      env:
        GIT_REPO: ${{ github.repository }}
        GIT_TAG: v${{ inputs.current_version }}
      name: Calculate the binary hash
    - name: Generate the template
      shell: bash
      run: pip install jinja2 || true; python -c "import os; from jinja2 import Environment, FileSystemLoader; tp=os.environ['TEMPLATE_PATH']; of=os.environ['OUTPUT_FILE']; gr=os.environ['GITHUB_REPO']; gt=os.environ['GIT_TAG']; fs=os.environ['FILE_SHA']; env=Environment(loader=FileSystemLoader(os.path.dirname(tp))); t=env.get_template(os.path.basename(tp)); open(of, 'w').write(t.render(github_repo=gr, git_tag=gt, file_sha=fs))"
      env:
        TEMPLATE_PATH: main-repo/homebrew/formula.rb.j2
        OUTPUT_FILE: formula.rb
        GITHUB_REPO: ${{ github.repository }}
        GIT_TAG: v${{ inputs.current_version }}
        FILE_SHA: ${{ steps.hash.outputs.SHA256 }}
    - name: Generate a changelog
      uses: PurpleBooth/changelog-action@619c4b782e4d2791e527361acdad0539b4e500d3 # v0.3.4
      with:
        config: main-repo/cliff.toml
        args: --verbose v${{ inputs.previous_version }}..v${{ inputs.current_version }} --repository main-repo
        output: CHANGELOG.md
    - shell: bash
      name: Open a PR on the custom tap repository
      run: |
        VERSION="$(echo $GIT_TAG | sed 's/^refs\/tags\///')"
        git -C homebrew-repo switch -c "$REPOSITORY_NAME-$VERSION"
        cp formula.rb "homebrew-repo/Formula/$REPOSITORY_NAME.rb"
        git -C homebrew-repo add "Formula/$REPOSITORY_NAME.rb"
        git -C homebrew-repo commit -m "fix: Update $REPOSITORY_NAME to $VERSION"
        git -C homebrew-repo push --force origin "$REPOSITORY_NAME-$VERSION"
        (cd homebrew-repo && gh pr create --body-file "../CHANGELOG.md" --label releases --base main --fill) || true
      env:
        REPOSITORY_NAME: ${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}
        GIT_TAG: v${{ inputs.current_version }}
        GITHUB_TOKEN: ${{ inputs.committer_token }}
